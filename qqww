using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;
using NPOI.HSSF.UserModel;
using NPOI.SS.Util;

namespace CsvToExcelWithPivot_NPOI
{
    class Program
    {
        static void Main(string[] args)
        {
            string csvDirectory = @"d:\abc";
            string outputExcelPath = @"d:\abc\combined_with_pivot_npoi.xlsx";

            try
            {
                // 确保目录存在
                if (!Directory.Exists(csvDirectory))
                {
                    Console.WriteLine($"目录 {csvDirectory} 不存在");
                    return;
                }

                // 读取所有CSV文件
                var csvFiles = Directory.GetFiles(csvDirectory, "*.csv");
                
                if (csvFiles.Length == 0)
                {
                    Console.WriteLine($"目录 {csvDirectory} 中没有找到CSV文件");
                    return;
                }

                // 创建新的Excel工作簿（XLSX格式）
                IWorkbook workbook = new XSSFWorkbook();

                // 用于存储所有数据的数据集
                DataSet allData = new DataSet();

                // 遍历每个CSV文件
                foreach (var csvFile in csvFiles)
                {
                    string sheetName = Path.GetFileNameWithoutExtension(csvFile);
                    // 限制工作表名称长度不超过31字符
                    if (sheetName.Length > 31)
                        sheetName = sheetName.Substring(0, 31);

                    // 读取CSV数据
                    DataTable csvData = ReadCsvFile(csvFile);
                    if (csvData != null && csvData.Rows.Count > 0)
                    {
                        // 添加到数据集
                        allData.Tables.Add(csvData.Copy());
                        
                        // 创建Excel工作表
                        ISheet worksheet = workbook.CreateSheet(sheetName);
                        
                        // 创建标题行样式
                        ICellStyle headerStyle = workbook.CreateCellStyle();
                        headerStyle.FillForegroundColor = IndexedColors.Grey25Percent.Index;
                        headerStyle.FillPattern = FillPattern.SolidForeground;
                        headerStyle.Alignment = HorizontalAlignment.Center;
                        headerStyle.VerticalAlignment = VerticalAlignment.Center;
                        IFont headerFont = workbook.CreateFont();
                        headerFont.Bold = true;
                        headerStyle.SetFont(headerFont);
                        
                        // 写入标题行
                        IRow headerRow = worksheet.CreateRow(0);
                        for (int i = 0; i < csvData.Columns.Count; i++)
                        {
                            ICell cell = headerRow.CreateCell(i);
                            cell.SetCellValue(csvData.Columns[i].ColumnName);
                            cell.CellStyle = headerStyle;
                        }
                        
                        // 写入数据行
                        for (int rowIndex = 0; rowIndex < csvData.Rows.Count; rowIndex++)
                        {
                            IRow dataRow = worksheet.CreateRow(rowIndex + 1);
                            for (int colIndex = 0; colIndex < csvData.Columns.Count; colIndex++)
                            {
                                ICell cell = dataRow.CreateCell(colIndex);
                                if (csvData.Rows[rowIndex][colIndex] != DBNull.Value)
                                {
                                    cell.SetCellValue(csvData.Rows[rowIndex][colIndex].ToString());
                                }
                            }
                        }
                        
                        // 自动调整列宽
                        for (int i = 0; i < csvData.Columns.Count; i++)
                        {
                            worksheet.AutoSizeColumn(i);
                        }
                    }
                }

                // 创建透视表工作表
                ISheet pivotSheet = workbook.CreateSheet("数据透视表");
                
                // 假设我们使用第一个表的数据创建透视表
                if (allData.Tables.Count > 0)
                {
                    DataTable firstTable = allData.Tables[0];
                    
                    // 定义透视表数据源范围（假设数据从A1开始）
                    string sourceRange = $"'{firstTable.TableName}'!A1:{GetColumnName(firstTable.Columns.Count)}{firstTable.Rows.Count + 1}";
                    
                    // 创建透视表
                    IPivotTable pivotTable = pivotSheet.CreatePivotTable(sourceRange, new CellReference("A3"), workbook);
                    
                    // 设置透视表选项
                    pivotTable.Name = "数据透视分析";
                    
                    // 添加行字段 (假设第一列为行字段)
                    if (firstTable.Columns.Count > 0)
                    {
                        pivotTable.AddRowLabel(firstTable.Columns[0].ColumnName);
                        
                        // 添加列字段 (假设第二列为列字段)
                        if (firstTable.Columns.Count > 1)
                        {
                            pivotTable.AddColumnLabel(firstTable.Columns[1].ColumnName);
                        }
                        
                        // 添加数据字段 (假设第三列为数据字段，求和)
                        if (firstTable.Columns.Count > 2)
                        {
                            pivotTable.AddDataLabel(firstTable.Columns[2].ColumnName, "求和", PivotAggregateFunction.Sum);
                        }
                    }
                    
                    // 添加标题
                    pivotSheet.CreateRow(0).CreateCell(0).SetCellValue("数据透视表分析");
                    pivotSheet.GetRow(0).GetCell(0).CellStyle.Font.Bold = true;
                }

                // 保存Excel文件
                using (FileStream fileStream = new FileStream(outputExcelPath, FileMode.Create))
                {
                    workbook.Write(fileStream);
                }
                
                Console.WriteLine($"成功将CSV文件合并到Excel，并创建透视表：{outputExcelPath}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"处理过程中发生错误: {ex.Message}");
                Console.WriteLine(ex.StackTrace);
            }
        }

        /// <summary>
        /// 读取CSV文件到DataTable
        /// </summary>
        static DataTable ReadCsvFile(string filePath)
        {
            DataTable dt = new DataTable();
            try
            {
                using (StreamReader reader = new StreamReader(filePath))
                {
                    // 读取标题行
                    if (!reader.EndOfStream)
                    {
                        string headerLine = reader.ReadLine();
                        string[] headers = headerLine.Split(',');
                        
                        // 添加列
                        foreach (string header in headers)
                        {
                            dt.Columns.Add(header.Trim());
                        }
                        
                        // 读取数据行
                        while (!reader.EndOfStream)
                        {
                            string line = reader.ReadLine();
                            if (string.IsNullOrEmpty(line)) continue;
                            
                            string[] values = line.Split(',');
                            DataRow row = dt.NewRow();
                            
                            for (int i = 0; i < headers.Length && i < values.Length; i++)
                            {
                                row[i] = values[i].Trim();
                            }
                            
                            dt.Rows.Add(row);
                        }
                    }
                }
                return dt;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"读取CSV文件 {filePath} 时出错: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// 将列索引转换为Excel列名（如1->A, 2->B, ...）
        /// </summary>
        static string GetColumnName(int columnIndex)
        {
            string result = "";
            while (columnIndex > 0)
            {
                int mod = (columnIndex - 1) % 26;
                result = Convert.ToChar('A' + mod) + result;
                columnIndex = (columnIndex - mod) / 26;
            }
            return result;
        }
    }
}
