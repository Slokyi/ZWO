import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';
import * as d3 from 'd3';
import { Node, Link } from './models/relation.model';

@Component({
  selector: 'app-relation-graph',
  template: `<div #graphContainer class="graph-container"></div>`,
  styles: [`.graph-container { width: 100%; height: 600px; border: 1px solid #ccc; }`]
})
export class RelationGraphComponent implements OnInit {
  @ViewChild('graphContainer') container!: ElementRef;

  // 示例数据
  nodes: Node[] = [
    { id: '1', name: '节点A' },
    { id: '2', name: '节点B' },
    { id: '3', name: '节点C' },
    { id: '4', name: '节点D' }
  ];

  links: Link[] = [
    { source: '1', target: '2' },
    { source: '1', target: '3' },
    { source: '2', target: '4' },
    { source: '3', target: '4' }
  ];

  // d3相关变量
  private svg: d3.Selection<SVGSVGElement, unknown, HTMLElement, any> | null = null;
  private simulation: d3.Simulation<Node, Link> | null = null;
  private selectedNodeId: string | null = null;

  ngOnInit(): void {
    this.initGraph();
  }

  // 初始化关系图
  private initGraph(): void {
    const container = this.container.nativeElement;
    const width = container.clientWidth;
    const height = container.clientHeight;

    // 创建SVG
    this.svg = d3.select(container)
      .append('svg')
      .attr('width', width)
      .attr('height', height);

    // 创建力导向模拟
    this.simulation = d3.forceSimulation<Node>(this.nodes)
      .force('link', d3.forceLink<Node, Link>(this.links)
        .id(d => d.id) // 用节点id关联关系
        .distance(100) // 节点间距
      )
      .force('charge', d3.forceManyBody().strength(-300)) // 节点排斥力
      .force('center', d3.forceCenter(width / 2, height / 2)); // 居中力

    this.drawGraph();
  }

  // 绘制图形元素
  private drawGraph(): void {
    if (!this.svg || !this.simulation) return;
    const svg = this.svg;
    const simulation = this.simulation;

    // 绘制关系线（先画线条，避免被节点遮挡）
    const link = svg.append('g')
      .selectAll('line')
      .data(this.links)
      .enter()
      .append('line')
      .attr('stroke', '#999')
      .attr('stroke-opacity', 0.6)
      .attr('stroke-width', 1);

    // 绘制节点
    const node = svg.append('g')
      .selectAll('circle')
      .data(this.nodes)
      .enter()
      .append('circle')
      .attr('r', 15) // 节点半径
      .attr('fill', '#69b3a2') // 默认颜色
      .call(this.drag(simulation)); // 绑定拖拽事件

    // 节点文本标签
    const nodeLabel = svg.append('g')
      .selectAll('text')
      .data(this.nodes)
      .enter()
      .append('text')
      .text(d => d.name)
      .attr('font-size', 12)
      .attr('dx', 20) // 文本偏移
      .attr('dy', 5);

    // 节点点击事件（选中/取消选中）
    node.on('click', (event, d) => {
      this.selectedNodeId = this.selectedNodeId === d.id ? null : d.id;
      this.highlightRelated(d.id); // 高亮相关节点和关系
    });

    // 力导向模拟更新
    simulation.on('tick', () => {
      // 更新关系线位置
      link
        .attr('x1', d => (d.source as Node).x!)
        .attr('y1', d => (d.source as Node).y!)
        .attr('x2', d => (d.target as Node).x!)
        .attr('y2', d => (d.target as Node).y!);

      // 更新节点位置
      node
        .attr('cx', d => d.x!)
        .attr('cy', d => d.y!);

      // 更新文本位置
      nodeLabel
        .attr('x', d => d.x!)
        .attr('y', d => d.y!);
    });
  }

  // 高亮选中节点及相关节点/关系
  private highlightRelated(selectedId: string | null): void {
    if (!this.svg) return;

    // 重置所有元素样式
    this.svg.selectAll('circle').attr('fill', '#69b3a2').attr('r', 15);
    this.svg.selectAll('line').attr('stroke', '#999').attr('stroke-width', 1);

    if (!selectedId) return;

    // 筛选相关节点（选中节点 + 直接关联节点）
    const relatedNodeIds = new Set<string>([selectedId]);
    this.links.forEach(link => {
      if (link.source === selectedId) relatedNodeIds.add(link.target);
      if (link.target === selectedId) relatedNodeIds.add(link.source);
    });

    // 高亮选中节点
    this.svg.selectAll('circle')
      .filter(d => d.id === selectedId)
      .attr('fill', '#ff0000')
      .attr('r', 18);

    // 高亮相关节点
    this.svg.selectAll('circle')
      .filter(d => relatedNodeIds.has(d.id) && d.id !== selectedId)
      .attr('fill', '#ff9900')
      .attr('r', 16);

    // 高亮相关关系
    this.svg.selectAll('line')
      .filter(d => d.source === selectedId || d.target === selectedId)
      .attr('stroke', '#ff0000')
      .attr('stroke-width', 2);
  }

  // 拖拽功能实现
  private drag(simulation: d3.Simulation<Node, Link>) {
    return d3.drag<SVGCircleElement, Node>()
      .on('start', (event, d) => {
        if (!event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x; // 固定x坐标
        d.fy = d.y; // 固定y坐标
      })
      .on('drag', (event, d) => {
        d.fx = event.x; // 更新x坐标
        d.fy = event.y; // 更新y坐标
      })
      .on('end', (event, d) => {
        if (!event.active) simulation.alphaTarget(0);
        // 松开后可继续被力模拟影响（若想固定则注释此行）
        d.fx = null;
        d.fy = null;
      });
  }
}
